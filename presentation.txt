Good afternoon, I am Bertram D'Hooge and for my final project I made a Chess AI, because honestly... what did you expect

In this presentation I will quickly go over the project, some of the decisions I made, some results and where I plan to go next.

First of all the project. As you all know we got some example topics for the final projects. However none of these really caught my interest. So I started thinking, what interests me and would be interesting to do as a final project. Off course: Chess. So let's make a chess AI! How hard can it be? Well, as it turns out, pretty hard. So where do we start, as always, with data. SO there are 2 main ways to represent the data of a chess game. We can take a board state and encode it as is, or we take the moves of a game, from which we can infer a board state. A board can be converted into a 8x8x14 matrix, which basically represents the chessboard, the 6 distinct pieces per side and some extra for en passant and castle squares. Using the moves, we could also one-hot encode or tokenize the moves. We have on average 40 moves, or 20 moves per side in a chess game.

With this data I filtered down to 2 different possible approaches: either predicting the next move actually played using the previous moves which we encoded, or we can use just the board state, and try to predict what a better engine thinks, either the evaluation or the next move. But here we get to a new problem, the amount of data... I chess there are a lot of possibilities. After just the first moves of both players there are already 400 different possible games, as both players have 16 possible pawn moves, and 4 possible knight moves. After the second move however, this number goes up 72 thousand, and after 3 moves we're at 9 million, and after just 5 moves we're here... And as mentioned the average chess game has about 20 mover per side. There are off course a lot of duplicates in pure boardstates as a lot of these boardstates can be reached through different move orders. But even then analysing and saving all those boardstates is just not really feasible and would be too slow to train and predict, and would take a large amount of preprocessing to convert all the games in my dataset to boardstates, so while it would be a very interesting and probably powerfull way to analyse the positions, with the time of the final project this is just not really feasible. So this approach is sadly off the table. 

So this brings us to the next part: NLP move selection. But why NLP, well actually, if we look at this game, which is the so called scolars mate where white wins after just 4 moves, we can try to see it a a sentence of sorts, and the using a model similar to for example what Wouter used in his caption generation, try to predict the next "word" in the sentence. To archieve this, I split my games or "sentences" in sequences in to chunk of 10 moves or "words". For the early moved I padded the sequenced, and then I tokenized my moves. Finally I cut of the last token in the sequence as the target for the model. For the model I used a simple Sequential model, mainly just an embedding and a bidirectional LSTM layer for word prediction. Finally I split the moves into early moves and late moves, with early moves being the first 10 moves and late moves being everything else and trained 2 different models using these splits. As you can see, the accuracy isn't great, but if we take a look at Chess.com's opening database just the 1st move has 4 main options and a quite a few minor other choices. So even humans don't play the same moves every time, and this increases even more in the mid to late game.

So where do I want to go now with the project? There are a couple main goals I want to archieve with the continuation of the project: First I want to further split the data to expand the early game part, and also split the models across different ratings of players. I would also like to add the pure board evaluation. Next I want to create some kind of front end or application so I can play against my AI, in the current state I can, but it's quite a hassle rigt now. And finally I want to take a look at reinforcement learning using the 2 algoritms.

Thank you very much for your attention during yet another chess themed talk and if you have any questions, you know where to contact me.
